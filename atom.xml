<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HwaelCode</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-04T09:22:38.911Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hwael</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 数据类型整理</title>
    <link href="http://yoursite.com/2020/03/04/javascript-data-type/"/>
    <id>http://yoursite.com/2020/03/04/javascript-data-type/</id>
    <published>2020-03-04T09:11:28.000Z</published>
    <updated>2020-03-04T09:22:38.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><ul><li>7 种原始类型:<ul><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>BigInt</li><li>Symbol</li></ul></li><li>Object</li></ul><h1 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h1><p>除 Object 以外的所有类型都是不可变的</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>布尔表示一个逻辑实体，可以有两个值：<code>true</code> 和 <code>false</code></p><h2 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h2><p>Null 类型只有一个值： null</p><h2 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h2><p>一个没有被赋值的变量会有个默认值 <code>undefined</code></p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(253 -1) 到 253 -1）</p><p>还有一些带符号的值：<code>+Infinity</code>，<code>-Infinity</code> 和 <code>NaN</code>(非数值，Not-a-Number)</p><p>要检查值是否大于或小于 <code>+/-Infinity</code>, 你可以使用常量 <code>Number.MAX_VALUE</code> 和 <code>Number.MIN_VALUE</code></p><p>在 ECMAScript 6 中，你也可以通过 <code>Number.isSafeInteger()</code> 方法还有 <code>Number.MAX_SAFE_INTEGER</code> 和 <code>Number.MIN_SAFE_INTEGER</code> 来检查值是否在双精度浮点数的取值范围内</p><h2 id="BigInt-类型"><a href="#BigInt-类型" class="headerlink" title="BigInt 类型"></a>BigInt 类型</h2><p>BigInt类型是 JavaScript 中的一个基础的数值类型，可以用任意精度表示整数</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>JavaScript的字符串类型用于表示文本数据。它是一组16位的无符号整数值的“元素”</p><h2 id="符号类型"><a href="#符号类型" class="headerlink" title="符号类型"></a>符号类型</h2><p>符号类型是唯一的并且是不可修改的, 并且也可以用来作为Object的key的值</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性使用键来标识，它的键值可以是一个字符串或者符号值（Symbol）</p><p>ECMAScript定义的对象中有两种属性：数据属性和访问器属性。</p><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><p>数据属性是键值对，并且每个数据属性拥有下列特性:</p><h4 id="数据属性的特性-Attributes-of-a-data-property"><a href="#数据属性的特性-Attributes-of-a-data-property" class="headerlink" title="数据属性的特性(Attributes of a data property)"></a>数据属性的特性(Attributes of a data property)</h4><table><thead><tr><th>特性</th><th>数据类型</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>[[Value]]</td><td>任何Javascript类型</td><td>包含这个属性的数据值</td><td>undefined</td></tr><tr><td>[[Writable]]</td><td>Boolean</td><td>如果该值为 false，则该属性的 [[Value]] 特性 不能被改变</td><td>true</td></tr><tr><td>[[Enumerable]]</td><td>Boolean</td><td>如果该值为 true，则该属性可以用 for…in 循环来枚举</td><td>true</td></tr><tr><td>[[Configurable]]</td><td>Boolean</td><td>如果该值为 false，则该属性不能被删除，并且 除了 [[Value]] 和 [[Writable]] 以外的特性都不能被改变。</td><td>true</td></tr></tbody></table><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><p>访问器属性有一个或两个访问器函数 (get 和 set) 来存取数值，并且有以下特性:</p><h4 id="一个访问器属性的特性"><a href="#一个访问器属性的特性" class="headerlink" title="一个访问器属性的特性"></a>一个访问器属性的特性</h4><table><thead><tr><th>特性</th><th>类型</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>[[Get]]</td><td>函数对象或者 undefined</td><td>该函数使用一个空的参数列表，能够在有权访问的情况下读取属性值。另见 get。</td><td>undefined</td></tr><tr><td>[[Set]]</td><td>函数对象或者 undefined</td><td>该函数有一个参数，用来写入属性值，另见 set。</td><td>undefined</td></tr><tr><td>[[Enumerable]]</td><td>Boolean</td><td>如果该值为 true，则该属性可以用 for…in 循环来枚举。</td><td>true</td></tr><tr><td>[[Configurable]]</td><td>Boolean</td><td>如果该值为 false，则该属性不能被删除，并且不能被转变成一个数据属性。</td><td>true</td></tr></tbody></table><h2 id="“标准的”-对象-和函数"><a href="#“标准的”-对象-和函数" class="headerlink" title="“标准的” 对象, 和函数"></a>“标准的” 对象, 和函数</h2><p>一个 Javascript 对象就是键和值之间的映射</p><p><strong>函数</strong> 是一个附带可被调用功能的常规对象。</p><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>当你想要显示日期时，毋庸置疑，使用内建的 <code>Date</code> 对象。</p><h2 id="有序集-数组和类型数组"><a href="#有序集-数组和类型数组" class="headerlink" title="有序集: 数组和类型数组"></a>有序集: 数组和类型数组</h2><p><strong>数组</strong> 是一种使用整数作为键(integer-key-ed)属性和长度(length)属性之间关联的常规对象</p><p>数组对象还继承了 Array.prototype 的一些操作数组的便捷方法</p><h3 id="类型数组-Typed-Arrays"><a href="#类型数组-Typed-Arrays" class="headerlink" title="类型数组(Typed Arrays)"></a>类型数组(Typed Arrays)</h3><p><strong>类型数组(Typed Arrays)</strong> 是ECMAScript Edition 6中新定义的 JavaScript 内建对象，提供了一个基本的二进制数据缓冲区的类数组视图</p><h2 id="键控集-Maps-Sets-WeakMaps-WeakSets"><a href="#键控集-Maps-Sets-WeakMaps-WeakSets" class="headerlink" title="键控集: Maps, Sets, WeakMaps, WeakSets"></a>键控集: Maps, Sets, WeakMaps, WeakSets</h2><ul><li>这些数据结构把对象的引用当作键</li><li>当 <code>Map</code> 和 <code>WeakMap</code> 把一个值和对象关联起来的时候， <code>Set</code> 和 <code>WeakSet</code> 表示一组对象</li><li><code>Map</code> 和 <code>WeakMaps</code> 之间的差别在于，在前者中，对象键是可枚举的</li></ul><h2 id="结构化数据-JSON"><a href="#结构化数据-JSON" class="headerlink" title="结构化数据: JSON"></a>结构化数据: JSON</h2><p><code>JSON (JavaScript Object Notation)</code> 是一种轻量级的数据交换格式，来源于 JavaScript 同时也被多种语言所使用。 JSON 用于构建通用的数据结构</p><h1 id="对象转换到基本类型值算法"><a href="#对象转换到基本类型值算法" class="headerlink" title="对象转换到基本类型值算法"></a>对象转换到基本类型值算法</h1><p>JavaScript 对象什么场景下会转换到基本类型值:</p><ul><li>数学运算：obj1 + obj2、obj1 - obj2 等</li><li>期望值是基本类型值的运算：alert(obj)</li></ul><h2 id="ToPrimitive-算法"><a href="#ToPrimitive-算法" class="headerlink" title="ToPrimitive 算法"></a>ToPrimitive 算法</h2><p>JavaScript 对象转换到基本类型值时，会使用 <code>ToPrimitive ( input [ , PreferredType ] )</code> 算法，这是一个内部算法，是编程语言在内部执行时遵循的一套规则。</p><h3 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h3><p>ToPrimitive 算法在执行时，会被传递一个参数 hint，表示这是一个什么类型的运算（也可以叫运算的期望值），根据这个 hint 参数，ToPrimitive 算法来决定内部的执行逻辑。</p><p><code>PreferredType</code> 表示对象将要转换的类型:</p><ul><li><code>PreferredType</code> 未传递，则令 hint 为 <code>default</code></li><li><code>PreferredType</code> 为 String，则 hint 为 <code>string</code></li><li><code>PreferredType</code> 为 Number，则 hint 为 <code>number</code></li></ul><h3 id="转换算法"><a href="#转换算法" class="headerlink" title="转换算法"></a>转换算法</h3><p>当对象发生到基本类型值的转换时，会按照下面的逻辑调用对象上的方法：</p><ol><li>如果存在，调用 <code>obj[Symbol.toPrimitive](hint)</code></li><li>否则，如果 hint 取值是 “<code>string</code>“:<ol><li>首先调用 <code>obj.toString()</code>, 如果是原始值则返回</li><li>否则再用 <code>obj.valueOf()</code>, 如果是原始值则返回</li><li>否则会报 <code>TypeError</code> 错误</li></ol></li><li>否则（也就是 hint 取值是 “<code>number</code>“ 或 “<code>default</code>“ 的情况）:<ol><li>首先调用 <code>obj.valueOf()</code>, 如果是原始值则返回</li><li>否则再用 <code>obj.toString()</code>, 如果是原始值则返回</li><li>否则会报 <code>TypeError</code> 错误</li></ol></li></ol><h4 id="例外-Date"><a href="#例外-Date" class="headerlink" title="例外 Date"></a>例外 <code>Date</code></h4><p><code>Date</code> 对象没有 <code>hint</code>, 认为 <code>hint</code> 是 <code>string</code></p><h3 id="确定-hint"><a href="#确定-hint" class="headerlink" title="确定 hint"></a>确定 hint</h3><p>用代码打印 <code>hint</code> 值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+obj1);         <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj1&#125;</span>`</span>);     <span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 + <span class="string">""</span>);     <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+obj2);         <span class="comment">// 10       -- hint 参数值是 "number"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj2&#125;</span>`</span>);     <span class="comment">// "hello"   -- hint 参数值是 "string"</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2 + <span class="string">""</span>);     <span class="comment">// "true"    -- hint 参数值是 "default"</span></span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><code>Symbol.toPrimitive</code> 和 <code>toString</code> 方法的返回值必须是 <strong>基本类型值</strong></li><li><code>valueOf</code> 方法除了可以返回 <strong>基本类型值</strong>，也可以返回 <strong>其他类型值</strong></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>当我们创建一个普通对象时（<code>{}</code> 或 <code>new Object()</code> 的方式等），对象上是不具备 <code>[Symbol.toPrimitive]</code> （方法）属性的。所以，对于普通对象的到基本类型值的运算，一般按照具体场景：</p><ol><li><code>hint</code> 值为 “<code>string</code>“ 时，先调用 <code>toString</code>，<code>toString</code> 如果返回一个基本类型值了，则返回、终止运算；否则接着调用 <code>valueOf</code> 方法</li><li>否则，先调用 <code>valueOf</code>，<code>valueOf</code> 如果返回一个基本类型值了，则返回、终止运算；否则接着调用 <code>toString</code> 方法</li></ol><h2 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h2><p>JavaScript调用valueOf方法将对象转换为原始值, 默认情况下, valueOf方法由Object后面的每个对象继承。 每个内置的核心对象都会覆盖此方法以返回适当的值。如果对象没有原始值, 则valueOf将返回对象本身。</p><h3 id="不同类型对象的valueOf-方法的返回值"><a href="#不同类型对象的valueOf-方法的返回值" class="headerlink" title="不同类型对象的valueOf()方法的返回值"></a>不同类型对象的valueOf()方法的返回值</h3><table><thead><tr><th>对象</th><th>返回值</th></tr></thead><tbody><tr><td>Array</td><td>返回数组对象本身</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Date</td><td>存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC</td></tr><tr><td>Function</td><td>函数本身</td></tr><tr><td>Number</td><td>数字值</td></tr><tr><td>Object</td><td>对象本身。这是默认情况</td></tr><tr><td>String</td><td>字符串值</td></tr><tr><td></td><td>Math 和 Error 对象没有 valueOf 方法</td></tr></tbody></table><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>每个对象都有一个 <code>toString()</code> 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，<code>toString()</code> 方法被每个 <code>Object</code> 对象继承。如果此方法在自定义对象中未被覆盖，<code>toString()</code> 返回 “<code>[object type]</code>“，其中 <code>type</code>是对象的类型.</p><h3 id="toSting-运算"><a href="#toSting-运算" class="headerlink" title="toSting 运算"></a>toSting 运算</h3><table><thead><tr><th>输入</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>‘null’</td></tr><tr><td>undefined</td><td>‘undefined’</td></tr><tr><td>number</td><td>参照§7.1.12.1</td></tr><tr><td>boolean</td><td>‘true’ / ‘false’</td></tr><tr><td>string</td><td>不转换</td></tr><tr><td>symbol</td><td>TypeError</td></tr><tr><td>object</td><td>ToString(ToPrimitive(input,String))</td></tr></tbody></table><h3 id="覆盖了-toString-属性的对象类型"><a href="#覆盖了-toString-属性的对象类型" class="headerlink" title="覆盖了 toString 属性的对象类型"></a>覆盖了 toString 属性的对象类型</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><ul><li>valueOf(): 返回对象本身</li><li>toString(): 相当于数组值调用 join(‘,’) 返回的字符串<br>  例如: [1,2,3].toString() =&gt; “1,2,3”</li></ul><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><ul><li>valueOf(): 返回对象本身</li><li>toString(): 返回函数中包含的代码转为字符串值</li></ul><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><ul><li>valueOf(): 返回给定的时间转为UNIX时间(自1 January 1970 00:00:00 UTC起算)，但是以微秒计算的数字值</li><li>toString(): 返回本地化的时间字符串</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://zhoushengfe.com/es6/es6-ch.html" target="_blank" rel="noopener">ECMAScript® 2016 语言规范</a></li><li><a href="http://yanhaijing.com/es5" target="_blank" rel="noopener">ECMAScript5.1中文版</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-数据类型&quot;&gt;&lt;a href=&quot;#JavaScript-数据类型&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据类型&quot;&gt;&lt;/a&gt;JavaScript 数据类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;7 种原始类型:&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="隐式转换" scheme="http://yoursite.com/tags/%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
</feed>
